// This is an autogenerated file from Firebase Studio.
'use server';

/**
 * @fileOverview A multiple choice question (MCQ) generation AI agent.
 *
 * - generateMCQ - A function that handles the MCQ generation process.
 * - GenerateMCQInput - The input type for the generateMCQ function.
 * - GenerateMCQOutput - The return type for the generateMCQ function.
 */

import {ai} from '@/ai/ai-instance';
import {z} from 'genkit';

const GenerateMCQInputSchema = z.object({
  topic: z.string().describe('The topic to generate MCQs for.'),
  numQuestions: z.number().describe('The number of MCQs to generate.'),
});
export type GenerateMCQInput = z.infer<typeof GenerateMCQInputSchema>;

const GenerateMCQOutputSchema = z.object({
  questions: z.array(
    z.object({
      question: z.string().describe('The multiple choice question.'),
      options: z.array(z.string()).describe('The options for the question.'),
      correctAnswer: z.string().describe('The correct answer to the question.'),
    })
  ).
describe('The generated multiple choice questions.'),
});
export type GenerateMCQOutput = z.infer<typeof GenerateMCQOutputSchema>;

export async function generateMCQ(input: GenerateMCQInput): Promise<GenerateMCQOutput> {
  return generateMCQFlow(input);
}

const prompt = ai.definePrompt({
  name: 'generateMCQPrompt',
  input: {
    schema: z.object({
      topic: z.string().describe('The topic to generate MCQs for.'),
      numQuestions: z.number().describe('The number of MCQs to generate.'),
    }),
  },
  output: {
    schema: z.object({
      questions: z.array(
        z.object({
          question: z.string().describe('The multiple choice question.'),
          options: z.array(z.string()).describe('The options for the question.'),
          correctAnswer: z.string().describe('The correct answer to the question.'),
        })
      ).
describe('The generated multiple choice questions.'),
    }),
  },
  prompt: `You are an expert in generating multiple choice questions for students.

  Generate {{numQuestions}} multiple choice questions on the topic of {{{topic}}}.

  Each question should have 4 options, with one correct answer.
  The options should be plausible distractors, testing the student's knowledge of the topic.

  Format the output as a JSON array of questions. Each question object in the array should have the following keys:
  - question: The multiple choice question.
  - options: An array of 4 strings, representing the options for the question.
  - correctAnswer: The correct answer to the question. This should be one of the strings in the options array.
  `,
});

const generateMCQFlow = ai.defineFlow<
  typeof GenerateMCQInputSchema,
  typeof GenerateMCQOutputSchema
>({
  name: 'generateMCQFlow',
  inputSchema: GenerateMCQInputSchema,
  outputSchema: GenerateMCQOutputSchema,
}, async input => {
  const {output} = await prompt(input);
  return output!;
});
