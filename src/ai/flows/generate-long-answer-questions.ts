// This is an autogenerated file from Firebase Studio.
'use server';

/**
 * @fileOverview A long answer question generator AI agent.
 *
 * - generateLongAnswerQuestions - A function that handles the long answer question generation process.
 * - GenerateLongAnswerQuestionsInput - The input type for the generateLongAnswerQuestions function.
 * - GenerateLongAnswerQuestionsOutput - The return type for the generateLongAnswerQuestions function.
 */

import {ai} from '@/ai/ai-instance';
import {z} from 'genkit';

const GenerateLongAnswerQuestionsInputSchema = z.object({
  topic: z.string().describe('The topic to generate long answer questions for.'),
  numQuestions: z.number().describe('The number of questions to generate.').default(1),
  grade: z.string().describe('The grade of the student.').nonempty(),
});
export type GenerateLongAnswerQuestionsInput = z.infer<typeof GenerateLongAnswerQuestionsInputSchema>;

const GenerateLongAnswerQuestionsOutputSchema = z.object({
  questions: z.array(z.string()).describe('The generated long answer questions.'),
  keyPoints: z.array(z.string()).describe('Suggested key points to include in the answers.'),
});
export type GenerateLongAnswerQuestionsOutput = z.infer<typeof GenerateLongAnswerQuestionsOutputSchema>;

export async function generateLongAnswerQuestions(
  input: GenerateLongAnswerQuestionsInput
): Promise<GenerateLongAnswerQuestionsOutput> {
  return generateLongAnswerQuestionsFlow(input);
}

const prompt = ai.definePrompt({
  name: 'generateLongAnswerQuestionsPrompt',
  input: {
    schema: z.object({
      topic: z.string().describe('The topic to generate long answer questions for.'),
      numQuestions: z.number().describe('The number of questions to generate.'),
      context: z.string().describe('The context for answering the long answer questions.'),
    }),
  },
  output: {
    schema: z.object({
      questions: z.array(z.string()).describe('The generated long answer questions.'),
      keyPoints: z.array(z.string()).describe('Suggested key points to include in the answers.'),
    }),
  },
  prompt: `You are an AI assistant designed to help teachers create long answer questions for students.
  Your task is to provide questions based on the context provided.
  The relevant course material is given as context.\n
  <CODE_BLOCK>\n
  Context:\n
  {{{context}}}\n
  </CODE_BLOCK>\n
  Generate {{numQuestions}} long answer questions on the topic of <CODE_BLOCK>\n {{{topic}}}\n </CODE_BLOCK>.\n
  Also, suggest key points that should be included in the answers to these questions.
  Format the output as a JSON object with "questions" and "keyPoints" keys, each containing an array of strings.
  Ensure the output is a valid JSON string that can be parsed without errors.
  `,
});





const generateLongAnswerQuestionsFlow = ai.defineFlow<
  typeof GenerateLongAnswerQuestionsInputSchema,
  typeof GenerateLongAnswerQuestionsOutputSchema
>({
  name: 'generateLongAnswerQuestionsFlow',
  inputSchema: GenerateLongAnswerQuestionsInputSchema,
  outputSchema: GenerateLongAnswerQuestionsOutputSchema,
},
async input => {
  let context: string = '';

  switch (input.grade) {
    case 'grade-8':
      context = `Grade 8 Subjects:
      - Mathematics: Algebra, Geometry, Data Handling
      - Science: Physics (Forces, Motion), Chemistry (Elements, Compounds), Biology (Cells, Systems)
      - English: Literature, Grammar
      - History: Modern World History
    `;
      break;
    case 'grade-6':
      context = `Grade 6 Subjects:
      - Mathematics: Fractions, Decimals, Ratios
      - Science: Simple Machines, Living Things
      - English: Reading Comprehension, Creative Writing
      - Geography: Continents and Oceans
    `;
      break;
    case 'grade-4':
      context = `Grade 4 Subjects:
      - Mathematics: Addition, Subtraction, Introduction to Multiplication
      - Science: Animals, Plants, Environment
      - English: Vocabulary Building, Sentence Formation
      - Social Studies: Communities and Citizenship
    `;
      break;
    default:
      context = `The student is in an unspecified grade, please provide answer based on the best information you know.`;
      break;
  }
  const {output} = await prompt({...input, context});
  return output!;
});
